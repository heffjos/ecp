from nipype import Node, Workflow
from nipype.interfaces.fsl import ImageMaths
from nipype.interfaces.utility.base import IdentityInterface

try:
    import importlib.resources as pkg_resources
except ImportError:
    import importlib_resources as pkg_resources

from ..interfaces import workbench as wb

from .. import data

def init_hcp_segment_anat_wf(name='hcp_segment_anat_wf'):
    """
    This workflow generates WM, CSF and GM masks using the same 
    pipeline from the HCP pipeline. The wm and csf masks are created by 
    importing the appropriate freesurfer parcellations from the wmparc
    file and subtracting out the voxel marked as gm.

    **Paramters**

        name
            Name for the workflow hierarchy of Niype

    **Inputs**
        wmparc
            gyral white matter segmentation generated by freesurfer warped 
            MNI space
        l_atlasroi
            left vertex mask
        l_midthickness
            left midthickness surface
        l_white
            left white matter surface
        l_pial
            left pial surface
        r_atlasroi
            right vertex mask
        r_midthickness
            right midthickness surface
        r_white
            right white matter surface
        r_pial
            right pial surface
        ROIs
            subcortical parcellation of brain warped into MNI space

    **Outputs**
        masks
            WM, CSF, and GM masks
    """
    wf = Workflow(name='hcp_segment')
    with pkg_resources.path(data, 'FreeSurferCSFRegLut.txt') as tmp:
        csf_rois = str(tmp)
    with pkg_resources.path(data, 'FreeSurferWMRegLut.txt') as tmp:
        wm_rois = str(tmp)

    inputnode = Node(IdentityInterface(
        fields=['wmparc', 'l_atlasroi', 'l_midthickness', 'l_white', 'l_pial', 
                'r_atlasroi', 'r_midthickness', 'r_white', 'r_pial', 'ROIs']),
        name='inputnode')
    outputnode = Node(IdentityInterface(
        fields=['cort_gm_mask', 'subcort_gm_mask', 'gm_mask', 
                'wm_mask', 'csf_mask']),
        name='outputnode')

    # gm mask nodes
    l_gm_mask = Node(wb.MetricToVolumeMappingRC(out_file='l_gm_mask.nii.gz'), 
                     name='l_gm_mask')
    r_gm_mask = Node(wb.MetricToVolumeMappingRC(out_file='r_gm_mask.nii.gz'),
                     name='r_gm_mask')
    cort_gm_mask = Node(ImageMaths(out_file='cortical_gm_mask.nii.gz',
                                   op_string='-add',
                                   args='-bin'),
                        name='cort_gm_mask')
    subcort_gm_mask = Node(ImageMaths(out_file='subcortical_gm_mask.nii.gz',
                                      op_string='-bin'),
                           name='subcort_gm_mask')
    brain_gm_mask = Node(ImageMaths(out_file='brain_gm_mask.nii.gz',
                                    op_string='-add',
                                    args='-dilD -dilD'),
                         name='brain_gm_mask')

    # wm mask nodes
    wm_vol = Node(wb.VolumeLabelImport(out_file='wm_vol.nii.gz',
                                       label_list_file=wm_rois,
                                       discard_others=True,
                                       drop_unused_labels=True),
                  name='wm_vol')
    final_wm = Node(ImageMaths(out_file='wm_mask.nii.gz',
                               op_string='-bin -sub',
                               args='-bin'),
                    name='final_wm')
    
    # csf mask nodes
    csf_vol = Node(wb.VolumeLabelImport(out_file='csf_vol.nii.gz',
                                        label_list_file=csf_rois,
                                        discard_others=True,
                                        drop_unused_labels=True),
                   name='csf_vol')
    final_csf = Node(ImageMaths(out_file='csf_mask.nii.gz',
                                op_string='-bin -sub',
                                args='-bin'),
                     name='final_csf')

    wf.connect([
        # gm
        (inputnode, l_gm_mask, [('l_atlasroi', 'in_file'),
                                ('l_midthickness', 'surface'),
                                ('wmparc', 'volume_space'),
                                ('l_pial', 'inner_surf'),
                                ('l_white', 'outer_surf')]),
        (inputnode, r_gm_mask, [('r_atlasroi', 'in_file'),
                                ('r_midthickness', 'surface'),
                                ('wmparc', 'volume_space'),
                                ('r_pial', 'inner_surf'),
                                ('r_white', 'outer_surf')]),
        (l_gm_mask, cort_gm_mask, [('out_file', 'in_file')]),
        (r_gm_mask, cort_gm_mask, [('out_file', 'in_file2')]),
        (inputnode, subcort_gm_mask, [('ROIs', 'in_file')]),
        (cort_gm_mask, brain_gm_mask, [('out_file', 'in_file')]),
        (subcort_gm_mask, brain_gm_mask, [('out_file', 'in_file2')]),
        # wm
        (inputnode, wm_vol, [('wmparc', 'in_file')]),
        (wm_vol, final_wm, [('out_file', 'in_file')]),
        (brain_gm_mask, final_wm, [('out_file', 'in_file2')]),
        # csf
        (inputnode, csf_vol, [('wmparc', 'in_file')]),
        (csf_vol, final_csf, [('out_file', 'in_file')]),
        (brain_gm_mask, final_csf, [('out_file', 'in_file2')]),
        # output
        (cort_gm_mask, outputnode, [('out_file', 'cort_gm_mask')]),
        (subcort_gm_mask, outputnode, [('out_file', 'subcort_gm_mask')]),
        (brain_gm_mask, outputnode, [('out_file', 'brain_gm_mask')]),
        (final_wm, outputnode, [('out_file', 'wm_mask')]),
        (final_csf, outputnode, [('out_file', 'csf_mask')])
    ])

    return wf
        
    
        

    
    
    
    
    
    

    

    
        


        
        
